namespace MassTransit.DapperIntegration.Saga
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;
    using Dapper;


    /// <summary>
    /// The SAP HANA database adapter.
    /// </summary>
    public class HanaAdapter : ISqlAdapter
    {
        public static readonly ISqlAdapter Instance = new HanaAdapter();

        /// <summary>
        /// Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
        /// </summary>
        /// <param name="connection">The connection to use.</param>
        /// <param name="transaction">The transaction to use.</param>
        /// <param name="commandTimeout">The command timeout to use.</param>
        /// <param name="tableName">The table to insert into.</param>
        /// <param name="columnList">The columns to set with this insert.</param>
        /// <param name="parameterList">The parameters to set for this insert.</param>
        /// <param name="keyProperties">The key columns in this table.</param>
        /// <param name="entityToInsert">The entity to insert.</param>
        /// <returns>The Id of the row created.</returns>
        public int Insert(
            IDbConnection connection,
            IDbTransaction transaction,
            int? commandTimeout,
            string tableName,
            string columnList,
            string parameterList,
            IEnumerable<PropertyInfo> keyProperties,
            object entityToInsert)
        {

            var cmd = $"insert into {tableName} ({columnList}) values ({parameterList});select SCOPE_IDENTITY() id";
            var multi = connection.QueryMultiple(cmd, entityToInsert, transaction, commandTimeout);

            var first = multi.Read().FirstOrDefault();
            if (first == null || first.id == null)
                return 0;

            var id = (int)first.id;
            var propertyInfos = keyProperties as PropertyInfo[] ?? keyProperties.ToArray();
            if (propertyInfos.Length == 0)
                return id;

            var idProperty = propertyInfos[0];
            idProperty.SetValue(entityToInsert, Convert.ChangeType(id, idProperty.PropertyType), null);

            return id;
        }

        /// <summary>
        /// Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
        /// </summary>
        /// <param name="connection">The connection to use.</param>
        /// <param name="transaction">The transaction to use.</param>
        /// <param name="commandTimeout">The command timeout to use.</param>
        /// <param name="tableName">The table to insert into.</param>
        /// <param name="columnList">The columns to set with this insert.</param>
        /// <param name="parameterList">The parameters to set for this insert.</param>
        /// <param name="keyProperties">The key columns in this table.</param>
        /// <param name="entityToInsert">The entity to insert.</param>
        /// <returns>The Id of the row created.</returns>
        public async Task<int> InsertAsync(
            IDbConnection connection,
            IDbTransaction transaction,
            int? commandTimeout,
            string tableName,
            string columnList,
            string parameterList,
            IEnumerable<PropertyInfo> keyProperties,
            object entityToInsert)
        {
            var fixedHanaParameterList = string.Join(", ", parameterList.Split(',').Select(p => $"?{p.Trim(' ', '@')}?"));
            var cmd = $"INSERT INTO {tableName} ({columnList}) VALUES ({fixedHanaParameterList})";
            await connection.ExecuteAsync(cmd, entityToInsert, transaction, commandTimeout).ConfigureAwait(false);
            var r = await connection.QueryAsync<dynamic>("SELECT CURRENT_IDENTITY_VALUE() \"id\" FROM DUMMY;", transaction: transaction, commandTimeout: commandTimeout).ConfigureAwait(false);

            var id = r.First().id;
            if (id == null) return 0;
            var pi = keyProperties as PropertyInfo[] ?? keyProperties.ToArray();
            if (pi.Length == 0) return Convert.ToInt32(id);

            var idp = pi[0];
            idp.SetValue(entityToInsert, Convert.ChangeType(id, idp.PropertyType), null);

            return Convert.ToInt32(id);
        }


        /// <summary>
        /// Adds the name of a column.
        /// </summary>
        /// <param name="sb">The string builder  to append to.</param>
        /// <param name="columnName">The column name.</param>
        public void AppendColumnName(StringBuilder sb, string columnName)
        {
            var escapedColumnName = HanaHelper.IsHanaReservedWord(columnName) ? $"\"{columnName}\"" : columnName;
            sb.AppendFormat("{0}", escapedColumnName);
        }

        /// <summary>
        /// Adds a column equality to a parameter.
        /// </summary>
        /// <param name="sb">The string builder  to append to.</param>
        /// <param name="columnName">The column name.</param>
        public void AppendColumnNameEqualsValue(StringBuilder sb, string columnName)
        {
            var escapedColumnName = HanaHelper.IsHanaReservedWord(columnName) ? $"\"{columnName}\"" : columnName;
            sb.AppendFormat("{0} = ?{1}?", escapedColumnName, columnName);
        }
    }


    public static class HanaHelper
    {
        private static readonly HashSet<string> ReservedWords = new HashSet<string>
        {
            "ABS",
"ABSOLUTE",
"ACTION",
"ADA",
"ADD",
"ADMIN",
"AFTER",
"ALL",
"ALLOCATE",
"ALTER",
"ALWAYS",
"AND",
"ANY",
"ARE",
"ARRAY_AGG",
"ARRAY_MAX_CARDINALITY",
"ARRAY",
"AS",
"ASC",
"ASENSITIVE",
"ASSERTION",
"ASSIGNMENT",
"ASYMMETRIC",
"AT",
"ATOMIC",
"ATTRIBUTE",
"ATTRIBUTES",
"AUTHORIZATION",
"AVG",
"BEFORE",
"BEGIN_FRAME",
"BEGIN_PARTITION",
"BEGIN",
"BERNOULLI",
"BETWEEN",
"BIGINT",
"BINARY",
"BLOB",
"BOOL",
"BOOLEAN",
"BOTH",
"BREADTH",
"BREAK",
"BY",
"CALL",
"CALLED",
"CARDINALITY",
"CASCADE",
"CASCADED",
"CASE",
"CAST",
"CATALOG_NAME",
"CEIL",
"CEILING",
"CHAIN",
"CHAR_LENGTH",
"CHAR",
"CHARACTER_LENGTH",
"CHARACTER_SET_CATALOG",
"CHARACTER_SET_NAME",
"CHARACTER_SET_SCHEMA",
"CHARACTER",
"CHARACTERISTICS",
"CHARACTERS",
"CHECK",
"CLASS_ORIGIN",
"CLOB",
"CLOSE",
"COALESCE",
"COBOL",
"COLLATE",
"COLLATION_CATALOG",
"COLLATION_NAME",
"COLLATION_SCHEMA",
"COLLATION",
"COLLECT",
"COLUMN_NAME",
"COLUMN",
"COMMAND_FUNCTION_CODE",
"COMMAND_FUNCTION",
"COMMIT",
"COMMITTED",
"CONDITION_NUMBER",
"CONDITION",
"CONNECT",
"CONNECTION_NAME",
"CONNECTION",
"CONST",
"CONSTRAINT_CATALOG",
"CONSTRAINT_NAME",
"CONSTRAINT_SCHEMA",
"CONSTRAINT",
"CONSTRAINTS",
"CONSTRUCTOR",
"CONTAINS",
"CONTINUE",
"CONTINUE",
"CONVERT",
"CORR",
"CORRESPONDING",
"COUNT",
"COVAR_POP",
"COVAR_SAMP",
"CREATE",
"CROSS",
"CUBE",
"CUME_DIST",
"CURRENT_CATALOG",
"CURRENT_DATE",
"CURRENT_DEFAULT_TRANSFORM_GROUP",
"CURRENT_PATHCURRENT_ROLE",
"CURRENT_TRANSFORM_GROUP_FOR_TYPE",
"CURRENT_USER",
"CURRENT",
"CURSOR_NAME",
"CURSOR",
"CYCLE",
"DATE",
"DAY",
"DEALLOCATE",
"DEC",
"DOUBLE",
"DECIMAL",
"DECLARE",
"DEFAULT",
"DELETE",
"DO",
"DENSE_RANK",
"DEREF",
"DESCRIBE",
"DETERMINISTIC",
"DISCONNECT",
"DISTINCT",
"DROP",
"DYNAMIC",
"DATA",
"DATETIME_INTERVAL_CODE",
"DATETIME_INTERVAL_PRECISION",
"DEFAULTS",
"DEFERRABLE",
"DEFERRED",
"DEFINED",
"DEFINER",
"DEGREE",
"DEPTH",
"DERIVED",
"DESC",
"DESCRIPTOR",
"DIAGNOSTICS",
"DISPATCH",
"DOMAIN",
"DYNAMIC_FUNCTION",
"DYNAMIC_FUNCTION_CODE",
"EACH",
"EDGE",
"ELEMENT",
"ELSE",
"END_FRAME",
"END_PARTITION",
"END",
"END-EXEC",
"ENFORCED",
"ENUM",
"EQUALS",
"ESCAPE",
"EVERY",
"EXCEPT",
"EXCLUDE",
"EXCLUDING",
"EXEC",
"EXECUTE",
"EXISTS",
"EXP",
"EXPRESSION",
"EXTERNAL",
"EXTRACT",
"FALSE",
"FETCH",
"FILTER",
"FINAL",
"FIRST_VALUE",
"FIRST",
"FLAG",
"FLOAT",
"FLOOR",
"FOLLOWING",
"FOR",
"FOREACH",
"FOREIGN",
"FORTRAN",
"FOUND",
"FRAME_ROW",
"FREE",
"FROM",
"FULL",
"FUNCTION",
"FUSION",
"GENERAL",
"GENERATED",
"GET",
"GLOBAL",
"GO",
"GOTO",
"GRANT",
"GRANTED",
"GRAPH",
"GROUP",
"GROUPING",
"GROUPS",
"HAVING",
"HIERARCHY",
"HOLD",
"HOOK",
"HOUR",
"IDENTITY",
"IF",
"IGNORE",
"IMMEDIATE",
"IMMEDIATELY",
"IMPLEMENTATION",
"IMPORT",
"IN",
"INCLUDE",
"INCLUDING",
"INCREMENT",
"INDICATOR",
"INITIALLY",
"INNER",
"INOUT",
"INPUT",
"INSENSITIVE",
"INSERT",
"INSTANCE",
"INSTANTIABLE",
"INSTEAD",
"INT",
"INTEGER",
"INTERSECT",
"INTERSECTION",
"INTERVAL",
"INTO",
"INVOKER",
"IS",
"ISOLATION",
"JOIN",
"KEY",
"KEY_MEMBER",
"KEY_TYPE",
"LAG",
"LANGUAGE",
"LARGE",
"LAST_VALUE",
"LAST",
"LATERAL",
"LEAD",
"LEADING",
"LEFT",
"LENGTH",
"LEVEL",
"LIKE_REGEX",
"LIKE",
"LIST",
"LN",
"LOCAL",
"LOCALTIME",
"LOCALTIMESTAMP",
"LOCATOR",
"LOWER",
"MAP",
"MATCH",
"MATCHED",
"MAX",
"MAXVALUE",
"MEMBER",
"MERGE",
"MESSAGE_LENGTH",
"MESSAGE_OCTET_LENGTH",
"MESSAGE_TEXT",
"METHOD",
"MIN",
"MINUTE",
"MINVALUE",
"MOD",
"MODIFIES",
"MODULE",
"MONTH",
"MORE",
"MULTISET",
"MUMPS",
"NAME",
"NAMES",
"NAMESPACE",
"NATIONAL",
"NATURAL",
"NCHAR",
"NCLOB",
"NESTING",
"NEW",
"NEXT",
"NFC",
"NFD",
"NFKC",
"NFKD",
"NO",
"NONE",
"NORMALIZE",
"NORMALIZED",
"NOT",
"NTH_VALUE",
"NTILE",
"NULL",
"NULLABLE",
"NULLIF",
"NULLS",
"NUMBER",
"NUMERIC",
"NVARCHAR",
"OBJECT",
"OCCURRENCES_REGEX",
"OCTET_LENGTH",
"OCTETS",
"OF",
"OFFSET",
"OLD",
"ON",
"ONLY",
"OPEN",
"OPTION",
"OPTIONS",
"OR",
"ORDER",
"ORDERING",
"ORDINALITY",
"OTHERS",
"OUT",
"OUTER",
"OUTPUT",
"OVER",
"OVERLAPS",
"OVERLAY",
"OVERRIDING",
"PAD",
"PARAMETER_MODE",
"PARAMETER_NAME",
"PARAMETER_ORDINAL_POSITION",
"PARAMETER_SPECIFIC_CATALOG",
"PARAMETER_SPECIFIC_NAME",
"PARAMETER_SPECIFIC_SCHEMA",
"PARAMETER",
"PARTIAL",
"PARTITION",
"PASCAL",
"PATH",
"PERCENT_RANK",
"PERCENT",
"PERCENTILE_CONT",
"PERCENTILE_DISC",
"PERIOD",
"PERSISTENT",
"PLACING",
"PLI",
"PORTION",
"POSITION_REGEX",
"POSITION",
"POWER",
"PRECEDES",
"PRECEDING",
"PRECISION",
"PREPARE",
"PRESERVE",
"PRIMARY",
"PRIOR",
"PRIVILEGES",
"PROCEDURE",
"PUBLIC",
"RANGE",
"RANK",
"READ",
"READS",
"REAL",
"RECURSIVE",
"REF",
"REFERENCES",
"REFERENCING",
"REGR_AVGX",
"REGR_AVGY",
"REGR_COUNT",
"REGR_INTERCEPT",
"REGR_R2",
"REGR_SLOPE",
"REGR_SXX",
"REGR_SXY",
"REGR_SYY",
"RELATIVE",
"RELEASE",
"REPEATABLE",
"RESPECT",
"RESTART",
"RESTRICT",
"RESULT",
"RETURN",
"RETURNED_CARDINALITY",
"RETURNED_LENGTH",
"RETURNED_OCTET_LENGTH",
"RETURNED_SQLSTATE",
"RETURNS",
"REVOKE",
"RIGHT",
"ROLE",
"ROLLBACK",
"ROLLUP",
"ROUTINE_CATALOG",
"ROUTINE_NAME",
"ROUTINE_SCHEMA",
"ROUTINE",
"ROW_COUNT",
"ROW_NUMBER",
"ROW",
"ROWS",
"SAVEPOINT",
"SCALE",
"SCHEMA_NAME",
"SCHEMA",
"SCOPE_CATALOG",
"SCOPE_NAME",
"SCOPE_SCHEMA",
"SCOPE",
"SCROLL",
"SEARCH",
"SECOND",
"SECTION",
"SECURITY",
"SELECT",
"SELF",
"SENSITIVE",
"SEQUENCE",
"SERIALIZABLE",
"SERVER_NAME",
"SESSION_USER",
"SESSION",
"SET",
"SETS",
"SIMILAR",
"SIMPLE",
"SIZE",
"SMALLINT",
"SOME",
"SOURCE",
"SPACE",
"SPECIFIC_NAME",
"SPECIFIC",
"SPECIFICTYPE",
"SQL",
"SQLEXCEPTION",
"SQLSTATE",
"SQLWARNING",
"SQRT",
"ST_CIRCULARSTRING",
"ST_COMPOUNDCURVE",
"ST_CURVE",
"ST_CURVEPOLYGON",
"ST_GEOMCOLLECTION",
"ST_GEOMETRY",
"ST_LINESTRING",
"ST_MULTICURVE",
"ST_MULTILINESTRING",
"ST_MULTIPOINT",
"ST_MULTIPOLYGON",
"ST_MULTISURFACE",
"ST_POINT",
"ST_POLYGON",
"ST_SURFACE",
"START",
"STATE",
"STATEMENT",
"STATIC",
"STDDEV_POP",
"STDDEV_SAMP",
"STRUCTURE",
"STYLE",
"SUBCLASS_ORIGIN",
"SUBMULTISET",
"SUBSTRING_REGEX",
"SUBSTRING",
"SUCCEEDS",
"SUM",
"SWITCH",
"SYMMETRIC",
"SYSTEM_TIME",
"SYSTEM_USER",
"SYSTEM",
"TABLE_NAME",
"TABLE",
"TABLESAMPLE",
"TEMPORARY",
"TEXT",
"THEN",
"TIES",
"TIME",
"TIMESTAMP",
"TIMEZONE_HOUR",
"TIMEZONE_MINUTE",
"TO",
"TOP_LEVEL_COUNT",
"TRAILING",
"TRANSACTION_ACTIVE",
"TRANSACTION",
"TRANSACTIONS_COMMITTED",
"TRANSACTIONS_ROLLED_BACK",
"TRANSFORM",
"TRANSFORMS",
"TRANSLATE_REGEX",
"TRANSLATE",
"TRANSLATION",
"TREAT",
"TREE",
"TRIGGER_CATALOG",
"TRIGGER_NAME",
"TRIGGER_SCHEMA",
"TRIGGER",
"TRIM_ARRAY",
"TRIM",
"TRUE",
"TRUNCATE",
"TYPE",
"UESCAPE",
"UNBOUNDED",
"UNCOMMITTED",
"UNDER",
"UNION",
"UNIQUE",
"UNKNOWN",
"UNNAMED",
"UNNEST",
"UPDATE",
"UPPER",
"USAGE",
"USER_DEFINED_TYPE_CATALOG",
"USER_DEFINED_TYPE_CODE",
"USER_DEFINED_TYPE_NAME",
"USER_DEFINED_TYPE_SCHEMA",
"USER",
"USING",
"VALUE_OF",
"VALUE",
"VALUES",
"VAR_POP",
"VAR_SAMP",
"VARBINARY",
"VARCHAR",
"VARYING",
"VERSIONING",
"VERTEX",
"VIEW",
"VOID",
"WHEN",
"WHENEVER",
"WHERE",
"WHILE",
"WIDTH_BUCKET",
"WINDOW",
"WITH",
"WITHIN",
"WITHOUT",
"WORK",
"WRITE",
"YEAR",
"ZONE"
        };

        public static bool IsHanaReservedWord(string str) => ReservedWords.Contains(str.ToUpper());
    }
}
